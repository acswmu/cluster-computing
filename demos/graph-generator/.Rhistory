for (i in 1:edges){
edgeTemp=as.integer(strsplit(all_content[i]))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
for (i in 1:edges){
edgeTemp=as.integer((all_content[i]))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
mat
for (i in 1:edges){
edgeTemp=as.integer((all_content[i]))
print(edgeTemp[1][1])
}
use warning()
use warnings()
use warning()
options(warn=0)
for (i in 1:edges){
edgeTemp=as.integer((all_content[i]))
print(edgeTemp[1][1])
}
for (i in 1:edges){
edgeTemp=as.integer((all_content[i]))
print(edgeTemp[1][1])
}
edgeTemp=as.integer((all_content[3]))
edgeTemp=all_content[3]
edgeTemp
as.integer(edgeTemp)
as.integer(edgeTemp[1][1])
as.integer(edgeTemp[1][1][1])
for (i in 1:edges){
edgeTemp=as.integer(strsplit((all_content[i]),","))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
for (i in 1:edges){
edgeTemp=strsplit((all_content[i]),",")
#mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
edgeTemp=strsplit((all_content[i]),",")
edgeTemp
edgeTemp=unlist(strsplit((all_content[i]),","))
edgeTemp
edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
edgeTemp
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
mat
for (k in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
edgeTemp
i
i=0
for (k in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
}
i
edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
edgeTemp[3][1]
edgeTemp
mat[edgeTemp[1][1]][edgeTemp[2][1]] = edgeTemp[3][1]
mat[edgeTemp[1][1]][edgeTemp[2][1]] = as.integer(edgeTemp[3][1])
mat[edgeTemp[1][1]][edgeTemp[2][1]
]
mat[edgeTemp[1][1]][edgeTemp[2][1]]
edgeTemp[1][1]
as.integer(edgeTemp[1][1])
a = edgeTemp[1][1]
b = edgeTemp[2][1]
mat[a][b]
a
b
mat
mat[7][8] = 5
mat
mat2 <- matrix(1:12, 6,2)
mat[,1] <- 1:3
mat2[,1] <- 1:3
mat[,1] = 5
mat
mat[,1][2] = 5
mat
mat[,1][2] = 10
mat
,1
z=1
hay = ","+z
hay = ,z
mat[1][,2] = 10
hey = ",1"
mat[hey][2] = 10
mat[1,2] = 10
mat[1,2][1] = 10
a
mat[,a][1] = 10
mat[,"a"][1] = 10
mat[,1][2]
mat
mat<-matrix(0, nodes, nodes)
mat
mat[1][1] =5
mat
mat[1][5] =5
mat[1][,5] =5
mat[,1][5] =5
mat[1,5] =5
mat
mat[a,5] =5
mat
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]]] = edgeTemp[3][1]
}
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]]] = edgeTemp[3][1]
}
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]] = edgeTemp[3][1]
}
mat
for (i in 1:edges){
edgeTempas.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]] = edgeTemp[3][1]
}
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]] = edgeTemp[3][1]
}
edgeTemp
edgeTemp[1,1]
edgeTemp[1]
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
}
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]]] = edgeTemp[3][1]
}
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=edgeTemp=as.integer(unlist(strsplit((all_content[i]),",")))
mat[edgeTemp[1][1],edgeTemp[2][1]] = edgeTemp[3][1]
}
edgeTemp
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
}
mat
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
}
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
mat
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
m = mat
library(igraph)
ig <- graph.adjacency(m, mode="undirected", weighted=TRUE)
qgraph(m,edge.labels=TRUE)
library(qgraph)
qgraph(m,edge.labels=TRUE)
mst(ig, weights = weighted)
mst(ig)
mst(ig)
mst(ig,  algorithm <- "prim")
mst(ig,  algorithm <- "prim")
library(igraph)
library(qgraph)
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
qgraph(mat,edge.labels=TRUE)
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
library(igraph)
library(qgraph)
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
qgraph(mat,edge.labels=TRUE)
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
#plot(ig, edge.label=round(E(ig)$weight, 3))
mst(ig)
test = mst(ig)
test.edges
test
test["edges"]
attributes(test)
attr(test, edges)
attr(test, edges[1])
attr(test, weighted)
minimum.spanning.tree(ig)
write(mst(ig),file="test.txt")
test
write(test,file="test.txt")
test.df = as.data.frame(do.call(rbind, test))
results <- capture.output(test)
results
cat(test)
results <- capture.output(test,"\n")
results[1]
library(igraph)
library(qgraph)
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
qgraph(mat,edge.labels=TRUE)
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
mst(ig)
test
test[3]
test[1]
test[2]
test
results[3]
results[4]
library(igraph)
library(qgraph)
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
qgraph(mat,edge.labels=TRUE)
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
mst(ig)
results <- capture.output(test)
results[4]
results
library(igraph)
library(qgraph)
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
el <- cbind(a=1:5, b=5:1, c=c(3,1,2,1,1))
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
qgraph(mat,edge.labels=TRUE)
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
mstoutput=mst(ig)
results <- capture.output(mstoutput)
results[4]
unlist(strsplit(results[4])
)
unlist(strsplit(results[4]))
strsplit(results[4])
substring(results[4],4)
substring(results[4],6)
substring(results[4],4)
trimresults = substring(results[4],4)
sub(".*--", "", trimresults)
gsub("--", "", trimresults)
gsub("--", ",", trimresults)
gsub("-- ", ",", trimresults)
gsub("--*", ",", trimresults)
s <- strsplit(trimresults, "[^[:digit:]]")
s
solution <- as.numeric(unlist(s))
solution
solution <- unique(solution[!is.na(solution)])
solution
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
solution
length(solution)
length(solution)/2
minlist<-matrix(0,length(solution)/2 , 3)
minlist
10 % 2
10 %% 2
2 %% 10
1 %% 2
2 %% 2
3 %% 2
4 %% 2
temp1 = matrix(0,length(solution)/2 , 1)
temp1
c(LL, c="harry")
LL <- list(1, 2)
LL
c(LL,3)
LL
LL = c(LL,3)
LL
unlist(LL)
for (i in 1:length(solution)){
if ((i%%2)==1) {
temp1=c(temp1,solution[i])
}
if ((i%%2)==0) {
temp2=c(temp1,solution[i])
}
}
unlist(temp1)
solution
solution[1]
solution[2]
temp1
temp2
temp1 <- list()
temp2 <- list()
temp1
temp1=c(temp1,solution[1])
temp1
temp1 <- list()
for (i in 1:length(solution)){
if ((i%%2)==1) {
temp1=c(temp1,solution[i])
}
if ((i%%2)==0) {
temp2=c(temp1,solution[i])
}
}
temp1
unlist(temp1)
unlist(temp2)
solution
temp1 <- list()
temp2 <- list()
for (i in 1:length(solution)){
if ((i%%2)=1) {
temp1=c(temp1,solution[i])
}
if ((i%%2)=0) {
temp2=c(temp1,solution[i])
}
}
temp1 <- list()
temp2 <- list()
for (i in 1:length(solution)){
if ((i%%2)==1) {
temp1=c(temp1,solution[i])
}
if ((i%%2)==0) {
temp2=c(temp2,solution[i])
}
}
unlist(temp1)
unlist(temp2)
solution
mat
mat[1,2]
temp1 <- list()
temp2 <- list()
for (i in 1:length(solution)){
if ((i%%2)==1) {
temp1=c(temp1,solution[i])
}
if ((i%%2)==0) {
temp2=c(temp2,solution[i])
}
}
n1=unlist(temp1)
n2=unlist(temp2)
for (i in 1:length(solution)/2){
minlist[i,1]=n1[i]
minlist[i,2]=n2[i]
minlist[i,3]=mat[n1[i],n2[i]]
}
minlist
sum(minlist$3)
sum(minlist$,3)
minlist(,3)
minlist(0,3)
minlist[],3]
minlist[,3]
sum(minlist[,3])
print()
help(print)
print("edge total=",sum(minlist[,3]))
print("edge total="sum(minlist[,3]))
print("edge total=%d",sum(minlist[,3]))
print("edge total=%i",sum(minlist[,3]))
print(sum(minlist[,3])
)
help(printf)
printf()
library(igraph)
library(qgraph)
all_content = readLines("/home/blake/github/cluster-computing/demos/graph-generator/NodeData.txt")
myheader = all_content[1]
edge_list = all_content[-1]
headvars = unlist(strsplit(myheader, ","))
nodes = as.integer(headvars[1][1])
edges = as.integer(headvars[2][1])
mat<-matrix(0, nodes, nodes)
for (i in 1:edges){
edgeTemp=as.integer(unlist(strsplit(edge_list[i], ",")))
mat[edgeTemp[1],edgeTemp[2]] = edgeTemp[3]
mat[edgeTemp[2],edgeTemp[1]] = edgeTemp[3]
}
qgraph(mat,edge.labels=TRUE)
ig <- graph.adjacency(mat, mode="undirected", weighted=TRUE)
mstoutput=mst(ig)
results <- capture.output(mstoutput)
trimresults = substring(results[4],5)
s <- strsplit(trimresults, "[^[:digit:]]")
solution <- as.numeric(unlist(s))
solution <- solution[!is.na(solution)]
minlist<-matrix(0,length(solution)/2 , 3)
temp1 <- list()
temp2 <- list()
for (i in 1:length(solution)){
if ((i%%2)==1) {
temp1=c(temp1,solution[i])
}
if ((i%%2)==0) {
temp2=c(temp2,solution[i])
}
}
n1=unlist(temp1)
n2=unlist(temp2)
for (i in 1:length(solution)/2){
minlist[i,1]=n1[i]
minlist[i,2]=n2[i]
minlist[i,3]=mat[n1[i],n2[i]]
}
print(minlist)
print('edge total=')
print(sum(minlist[,3]))
